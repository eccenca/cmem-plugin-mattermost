diff a/tests/test_mattermost.py b/tests/test_mattermost.py	(rejected hunks)
@@ -1,3 +1,3 @@
 """Plugin tests."""
-import io
+import uuid
 
@@ -4,39 +4,79 @@ import io
 import pytest
-from cmem.cmempy.workspace.projects.datasets.dataset import make_new_dataset
-from cmem.cmempy.workspace.projects.project import delete_project, make_new_project
-from cmem.cmempy.workspace.projects.resources.resource import (
-    create_resource,
-    get_resource_response,
+import requests
+from cmem_plugin_base.dataintegration.entity import (
+    EntitySchema,
+    EntityPath,
+    Entity,
+    Entities
 )
+from cmem_plugin_base.dataintegration.parameter.password import Password
 
-from cmem_plugin_mattermost.transform import Lifetime
-from cmem_plugin_mattermost.workflow import DollyPlugin
-from tests.utils import TestExecutionContext, needs_cmem
-
-PROJECT_NAME = "mattermost_test_project"
-DATASET_NAME = "sample_dataset"
-RESOURCE_NAME = "sample_dataset.txt"
-DATASET_TYPE = "text"
-
-
-@pytest.fixture
-def setup(request):
-    """Provides the DI build project incl. assets."""
-    make_new_project(PROJECT_NAME)
-    make_new_dataset(
-        project_name=PROJECT_NAME,
-        dataset_name=DATASET_NAME,
-        dataset_type=DATASET_TYPE,
-        parameters={"file": RESOURCE_NAME},
-        autoconfigure=False,
+from cmem_plugin_mattermost.workflow.mattermost_plugin import (
+    MattermostPlugin,
+    header,
+    get_dataset,
+    MattermostSearch
+)
+from tests.utils import TestSystemContext, TestExecutionContext, TestPluginContext, needs_cmem
+
+pytest_plugins = ["docker_compose"]
+access_token = Password(encrypted_value="ah85ckhk6ib6zqqjh7i7j16hra",
+                        system=TestSystemContext())
+bot_name = "plugin-test"
+user = "cmempy-developer"
+channel = "Town Square"
+message = "test"
+url = "http://localhost:8065"
+
+sample_data_full = {
+    "user": user,
+    "channel": channel,
+    "message": message,
+}
+
+sample_data_empty = {
+    "user": "",
+    "channel": "",
+    "message": "",
+}
+
+
+def get_entities(sample_data) -> Entities:
+    """get entities object with lead columns"""
+    projections = list(sample_data)
+    entities = []
+    entity_uri = f"urn:uuid:{str(uuid.uuid4())}"
+    values = [[sample_data[_]] for _ in projections]
+    entities.append(Entity(uri=entity_uri, values=values))
+    paths = [EntityPath(path=projection) for projection in projections]
+
+    schema = EntitySchema(
+        type_uri="https://example.org/vocab/mattermost",
+        paths=paths,
     )
-    with io.StringIO("mattermost plugin sample file.") as response_file:
-        create_resource(
-            project_name=PROJECT_NAME,
-            resource_name=RESOURCE_NAME,
-            file_resource=response_file,
-            replace=True,
-        )
+    return Entities(entities=entities, schema=schema)
+
+
+@needs_cmem
+def test_execute_with_inputs_and_static(mattermost_service):
+    MattermostPlugin(
+        mattermost_service,
+        access_token,
+        bot_name,
+        user,
+        "",
+        message,
+    ).execute([get_entities(sample_data_full)], TestExecutionContext())
+
 
-    request.addfinalizer(lambda: delete_project(PROJECT_NAME))
+def test_execute_error(mattermost_service):
+    with pytest.raises(ValueError):
+        MattermostPlugin(
+            mattermost_service,
+            access_token,
+            bot_name,
+            "",
+            "",
+            "",
+        ).execute([get_entities(sample_data_empty)], TestExecutionContext())
 
@@ -44,26 +84,155 @@ def setup(request):
 @needs_cmem
-def test_workflow_execution():
-    """Test plugin execution"""
-    entities = 100
-    values = 10
+def test_execute_with_inputs_only(mattermost_service):
+    MattermostPlugin(
+        mattermost_service,
+        access_token,
+        bot_name,
+        "",
+        "",
+        "",
+    ).execute([get_entities(sample_data_full)], TestExecutionContext())
+
+
+@needs_cmem
+def test_execute_with_no_inputs(mattermost_service):
+    MattermostPlugin(
+        mattermost_service,
+        access_token,
+        bot_name,
+        "",
+        "",
+        "",
+    ).execute([], TestExecutionContext())
+
+
+def test_execute_with_empty_message_error(mattermost_service):
+    with pytest.raises(ValueError):
+        MattermostPlugin(
+            mattermost_service,
+            access_token,
+            bot_name,
+            user,
+            channel,
+            "",
+        ).send_message_to_provided_parameter()
+
+
+def test_send_message_with_bot_to_user(mattermost_service):
+    MattermostPlugin(
+        mattermost_service,
+        access_token,
+        bot_name,
+        user,
+        "",
+        "Single user test message",
+    ).send_message_with_bot_to_user()
+
+
+def test_send_message_with_bot_to_channel(mattermost_service):
+    MattermostPlugin(
+        mattermost_service, access_token, bot_name, "", channel, "Channel test message"
+    ).send_message_with_bot_to_channel()
+
+
+def test_send_message_with_bot_to_channel_error(mattermost_service):
+    with pytest.raises(ValueError):
+        wrong_channel = "wrong_channel_name"
+        MattermostPlugin(
+            mattermost_service,
+            access_token,
+            bot_name,
+            "",
+            wrong_channel,
+            "Channel test message",
+        ).send_message_with_bot_to_channel()
 
-    plugin = DollyPlugin(number_of_entities=entities, number_of_values=values)
-    result = plugin.execute(inputs=(), context=TestExecutionContext())
-    for item in result.entities:
-        assert len(item.values) == len(result.schema.paths)
 
+def test_get_user_id(mattermost_service):
+    assert MattermostPlugin(
+        mattermost_service, access_token, bot_name, user, channel, message
+    ).get_id(user) == "hruniqwds7gg5bcm5fmn931iih"
 
-def test_transform_execution_with_optional_input():
-    """Test Lifetime with optional input"""
-    result = Lifetime(start_date="2000-05-22").transform(inputs=[])
-    for item in result:
-        assert item == "22"
 
+def test_get_user_id_error(mattermost_service):
+    with pytest.raises(ValueError):
+        user_empty = ""
+        MattermostPlugin(
+            mattermost_service, access_token, bot_name, user_empty, channel, message
+        ).get_id(user_empty)
 
-def test_transform_execution_with_inputs():
-    """Test Lifetime with sequence of inputs."""
-    result = Lifetime(start_date="").transform(
-        inputs=[["2000-05-22", "2021-12-12", "1904-02-29"]]
+        user_wrong = "wrong_user"
+        MattermostPlugin(
+            mattermost_service, access_token, bot_name, user_wrong, channel, message
+        ).get_id(user_empty)
+
+
+def test_get_channel_id(mattermost_service):
+    assert MattermostPlugin(
+        mattermost_service, access_token, bot_name, user, channel, message
+    ).get_channel_id() == "qzzdms4tyb8zzbo5e8b8r56mtc"
+
+
+def test_get_channel_id_error(mattermost_service):
+    with pytest.raises(ValueError):
+        channel_wrong = ""
+        MattermostPlugin(
+            mattermost_service, access_token, bot_name, user, channel_wrong, message
+        ).get_channel_id()
+
+
+def test_get_bot_id_error(mattermost_service):
+    with pytest.raises(ValueError):
+        bot_name_wrong = "wrong_bot"
+        MattermostPlugin(
+            mattermost_service, access_token, bot_name_wrong, user, channel, message
+        ).get_id(bot_name_wrong)
+
+
+def test_header():
+    result = {
+        "Authorization": f"Bearer {access_token.encrypted_value}",
+        "Content-Type": "application/json",
+    }
+    assert result == {
+        "Authorization": "Bearer ah85ckhk6ib6zqqjh7i7j16hra",
+        "Content-Type": "application/json",
+    }
+
+
+def test_get_request_handler_users_is_ok(mattermost_service):
+    result = requests.get(
+        f"{url}/api/v4/users",
+        headers=header(access_token),
+        timeout=2,
     )
-    assert result >= ["22", "0", "118"]
+    assert result.ok
+
+
+def test_send_message_to_provided_parameter_error(mattermost_service):
+    with pytest.raises(ValueError):
+        MattermostPlugin(
+            mattermost_service, access_token, bot_name, user, channel, ""
+        ).send_message_to_provided_parameter()
+
+
+def test_send_message_to_provided_parameter(mattermost_service):
+    MattermostPlugin(
+        mattermost_service,
+        access_token,
+        bot_name,
+        user,
+        channel,
+        message
+    ).send_message_to_provided_parameter()
+    MattermostPlugin(
+        mattermost_service, access_token, bot_name, "", channel, message
+    ).send_message_to_provided_parameter()
+    MattermostPlugin(
+        mattermost_service, access_token, bot_name, user, "", message
+    ).send_message_to_provided_parameter()
+
+
+def test_get_dataset(mattermost_service):
+    result = get_dataset(url, "users", access_token, [user])
+    assert result[0]["username"] == f"{user}"
 
@@ -71,5 +240,22 @@ def test_transform_execution_with_inputs():
 @needs_cmem
-def test_integration_placeholder(setup):
-    """Placeholder to write integration testcase with cmem"""
-    with get_resource_response(PROJECT_NAME, RESOURCE_NAME) as response:
-        assert response.text != ""
+def test_autocomplete_error():
+    with pytest.raises(ValueError):
+        MattermostSearch("users", "username").autocomplete(
+            ["cmem"],
+            [],
+            TestPluginContext()
+        )
+
+
+def test_autocomplete():
+    MattermostSearch("users", "username").autocomplete(
+        query_terms=["cmem"],
+        depend_on_parameter_values=[url, access_token],
+        context=TestPluginContext()
+    )
+
+    MattermostSearch("users", "username").autocomplete(
+        query_terms=[],
+        depend_on_parameter_values=[url, access_token],
+        context=TestPluginContext()
+    )
